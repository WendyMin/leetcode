Write a program to solve a Sudoku puzzle by filling the empty cells.

Empty cells are indicated by the character '.'.

You may assume that there will be only one unique solution.

https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png

A sudoku puzzle...

https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png

...and its solution numbers marked in red.










/*
  31ms 34%
  刚开始想的是用循环来解决问题，每个位置对应一个数组{0,0,0,1,0,1,1,0,1}，分别代表0—9的可能性，然后循环填入，不对了再删掉。
  可是这样做有一个问题，如何用while循环来完整表达流程，如何删去刚填入的数字。
  因此从discuss中得到了嵌套的方法，用true和false来判断是否应该继续循环还是删除当前填入的数字。
  用到了36题的Valid Sudoku，判断是否数独是否合理。
*/
class Solution {
    public void solveSudoku(char[][] board) {
        if(board == null || board.length == 0) return;
        solve(board);
    }
    
    public boolean solve(char[][] board){
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == '.'){
                    for(char c = '1'; c <= '9'; c++){//trial. Try 1 through 9
                        if(isValid(board, i, j, c)){
                            board[i][j] = c; //Put c for this cell                            
                            if(solve(board)) return true; //If it's the solution return true
                            else board[i][j] = '.'; //Otherwise go back
                        }
                    }                   
                    return false;
                }
            }
        }
        return true;
    }
    
    private boolean isValid(char[][] board, int row, int col, char c){
        for(int i = 0; i < 9; i++) {
            if(board[i][col] != '.' && board[i][col] == c) return false; //check row
            if(board[row][i] != '.' && board[row][i] == c) return false; //check column
            if(board[3*(row/3) + i/3][3*(col/3) + i%3] != '.' && board[3*(row/3) + i/3][3*(col/3) + i%3] == c) return false; //check 3*3 block
        }
        return true;
    }
    
}
