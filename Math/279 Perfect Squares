Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.

For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.






/*
  42ms 83%
  dp[0] = 0
  dp[1] = 1
  dp[2] = 2
  dp[3] = 3
  dp[4] = min(dp[4-1*1]+1=dp[3]+1,dp[4-2*2]+1=dp[0]+1)=min(4,1)=1
  dp[5] = min(dp[5-1*1]+1=dp[4]+1,dp[5-2*2]+1=dp[1]+1)=min(2,2)=2
*/
class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for(int i=1; i<n+1; i++){
            int min = Integer.MAX_VALUE;
            int j = 1;
            while(i-j*j>=0){
                min = Math.min(min, dp[i-j*j]+1);
                j++;
            }
            dp[i] = min;
        }
        return dp[n];
    }
}
