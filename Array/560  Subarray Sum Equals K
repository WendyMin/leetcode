/*
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
1. The length of the array is in range [1, 20,000].
2. The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].
*/






/*
	164ms 27%
*/
class Solution {
    public int subarraySum(int[] nums, int k) {
        int res = 0;
        for(int i = 0; i < nums.length; i++){
            int j = i;
            int sum = nums[j];
            if(sum == k) res++;
            while(++j < nums.length){
                sum += nums[j];
                if(sum == k) res++;
            }
        }
        return res;
    }
}






/*
	21ms 99.85%
*/
class Solution {
     public int subarraySum(int[] nums, int k) {
        int[] sums = new int[nums.length + 1];
        for (int i = 1; i < sums.length; i++) {
            sums[i] = sums[i - 1] + nums[i - 1];
        }
        return sub(sums, new int[sums.length], 0, sums.length - 1, k);
    }
    
    private int sub(int[] sums, int[] aux, int start, int end, int k) {
        if (start >= end) {
            return 0;
        }
        int mid = start + (end - start) / 2;
        int res = sub(sums, aux, start, mid, k) + sub(sums, aux, mid + 1, end, k);
        res += merge(sums, aux, start, mid, end, k);
        return res;
    }
    
    private int merge(int[] sums, int[] aux, int start, int mid, int end, int k) {
        // System.out.println("start: " + start + " mid: " + mid + " end: " + end);
        // System.out.println("Before merge: " + Arrays.toString(sums));
        for (int i = start; i <= end; i++) {
            aux[i] = sums[i];
        }
        int count = 0;
        int i = start, j = mid + 1, t = start;
        int p = mid + 1;
        while (i <= mid) {
            while (p <= end && aux[p] - k < aux[i]) p++;
            for (int q = 0; q + p <= end; q++) {
                if (aux[p + q] - k > aux[i]) break;
                else count++;
            }
            
            while (j <= end && aux[i] > aux[j]) sums[t++] = aux[j++];
            sums[t++] = aux[i++];
        }
        
        while (j <= end) sums[t++] = aux[j++];
        // System.out.println("After merge: " + Arrays.toString(sums));
        return count;
    }
}







/*
	32ms 99.22%
*/
class Solution {
    public int subarraySum(int[] nums, int k) {
        if (nums == null || nums.length == 0) return 0;
        int[] prefixSum = new int[nums.length+1];
        int sum = 0, num=0;
        for (int i=0; i<nums.length; i++){
            sum += nums[i];
            prefixSum[i+1] = sum;
        }
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        map.put(0, 1);
        for (int i=1; i<prefixSum.length; i++){
            if (map.containsKey(prefixSum[i]-k)) num += map.get(prefixSum[i]-k);
            if (map.containsKey(prefixSum[i])) map.put(prefixSum[i], map.get(prefixSum[i])+1);
            else map.put(prefixSum[i], 1);
        }
        return num;
    }
}






/*
	36ms 96%
*/
class Solution {
    public int subarraySum(int[] nums, int k) {
        if(nums.length == 0) {
            return 0;
        }
        int[] sum = new int[nums.length + 1];
        for(int i = 0; i < nums.length; ++i) {
            sum[i + 1] = nums[i] + sum[i];
        }
        Map<Integer, Integer> hmap = new HashMap<>();
        hmap.put(0, 1);
        int ret = 0;
        for(int i = 1; i < sum.length; ++i) {
            int val = sum[i] - k;
            if(hmap.containsKey(val)) {
                ret += hmap.get(val);
            }
            if(!hmap.containsKey(sum[i])) {
                hmap.put(sum[i], 1);
            } else {
                hmap.put(sum[i], hmap.get(sum[i]) + 1);
            }
        }
        return ret;
    }
}
