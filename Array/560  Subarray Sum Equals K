/*
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
1. The length of the array is in range [1, 20,000].
2. The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].
*/






/*
	164ms 23%
	TC: O(n`2)
	SC: O(1)
	for循环里面有一点复杂
*/
class Solution {
    public int subarraySum(int[] nums, int k) {
        int res = 0;
        for(int i = 0; i < nums.length; i++){
            int j = i;
            int sum = nums[j];
            if(sum == k) res++;
            while(++j < nums.length){
                sum += nums[j];
                if(sum == k) res++;
            }
        }
        return res;
    }
}






/*
	1213ms 27%
	TC: O(n`2)
	SC: O(1)
	改进了for循环，思路更清晰
*/
class Solution {
    public int subarraySum(int[] nums, int k) {
        int res=0;
        for(int i=0; i<nums.length; i++){
            int sum=0;
            for(int j=i; j<nums.length; j++){
                sum += nums[j];
                if(sum==k){
                    res++;
                }
            }
        }
        return res;
    }
}






/*
	43ms 61%
	【HashMap】
	Solution中思路，用HashMap存储从第一个数开始往后的每增加一个数之和sum，一旦sum-k出现在HashMap中，就说明有连续和为k的数段
	Object getOrDefault(Object key, Object defaultValue)回map键对应的map值，如果不存在map键，返回默认值
	https://leetcode.com/articles/subarray-sum-equals-k/
*/
class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0, sum = 0;
        HashMap < Integer, Integer > map = new HashMap < > ();
        map.put(0, 1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum - k))
                count += map.get(sum - k);
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}
