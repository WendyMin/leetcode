Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].





/*
    9ms 14%
    从头尾两头缩进的方法
*/
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums.length==0 || nums==null){
            return new int[] {-1,-1};
        }
        int lo=0,hi=nums.length-1;
        if(nums[lo]>target || nums[hi]<target) return new int[] {-1,-1};
        while(lo<=hi){
            if(nums[lo]<target) lo++;
            if(nums[hi]>target) hi--;
            if(nums[lo]==target && nums[hi]==target) return new int[] {lo,hi};
        }
        return new int[] {-1,-1};
    }
}





/*
    9ms 14%
    简化了一下上面的代码，将找到target的情况提前，这样就不用排除nums长度为0和1的情况了
*/
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int lo=0,hi=nums.length-1;
        while(lo<=hi){
            if(nums[lo]==target && nums[hi]==target) return new int[] {lo,hi};
            if(nums[lo]<target) lo++;
            if(nums[hi]>target) hi--;     
        }
        return new int[] {-1,-1};
    }
}





/*
    9ms 14%
    二分法，速度方面与前面的头尾缩进没什么区别
*/
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int lo=0,hi=nums.length-1;
        int mid=lo+(hi-lo)/2;
        while(lo<=hi){
            mid=lo+(hi-lo)/2;
            if(nums[mid]==target){
                int left=mid,right=mid;
                while(left>=0 && nums[left]==target){
                    left--;
                }
                while(right<nums.length && nums[right]==target){
                    right++;
                }
                return new int[] {left+1,right-1};
            }
            if(nums[mid]<target) lo=mid+1;
            if(nums[mid]>target) hi=mid-1;     
        }
        return new int[] {-1,-1};
    }
}
