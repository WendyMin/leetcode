We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.

Every time you guess wrong, I'll tell you whether the number is higher or lower.

You call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):

-1 : My number is lower
 1 : My number is higher
 0 : Congrats! You got it!
Example:
n = 10, I pick 6.

Return 6.





/*
  1ms 11%
  一开始在while循环里写了三个判断语句，相等的时候return答案，逻辑简单
*/
/* The guess API is defined in the parent class GuessGame.
   @param num, your guess
   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0
      int guess(int num); */

public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int lo = 1, hi = n;
        int res = 0;
        while(lo<=hi){
            int mid = lo+(hi-lo)/2;
            if(guess(mid)==1) lo = mid+1;
            else if(guess(mid)==-1) hi = mid-1;
            else res = mid; break;
        }
        return res;
    }
}





/*
  1ms 11%
  通过Solution，发现可以不用int res，而如果跳出了循环，就必然是错误的，因此可以返回-1，修改如下
*/
public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int lo = 1, hi = n;
        int res = 0;
        while(lo<=hi){
            int mid = lo+(hi-lo)/2;
            if(guess(mid)==1) lo = mid+1;
            else if(guess(mid)==-1) hi = mid-1;
            else return mid;
        }
        return -1;
    }
}





/*
  1ms 11%
  后来参考Discuss，发现可以更进一步简化代码，分为两种情况进行讨论：
  1. guess>answer:lo=mid+1
  2. guess<=answer:hi=mid  有可能hi正好就是answer，也有可能比answer小一些，用lo逐渐逼近hi
  缺点：虽然代码结构简单，可是执行的时间理论上比上一版慢，多了lo逼近正确的时间
*/
public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int lo = 1, hi = n;
        while(lo<hi){
            int mid = lo+(hi-lo)/2;
            if(guess(mid)==1) lo = mid+1;
            else hi = mid;
        }
        return lo;
    }
}
