Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

You may assume that each input would have exactly one solution and you may not use the same element twice.

Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2







/*
  1ms 40%
  TC: O(n)
  SC: O(1)
*/
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int lo=0, hi=numbers.length-1;
        while(lo<hi){
            if(numbers[lo]+numbers[hi] > target) hi--;
            else if(numbers[lo]+numbers[hi] < target) lo++;
            else return new int[] {lo+1, hi+1};
        }
        return new int[2];
    }
}






/*
	0ms 99%
	【BinarySearch】
	???尤其85行不太懂，BinarySearch的return两个类型都不同,未完
*/
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int left = 0, right = numbers.length;
        while(left < right){
            int complement = target - numbers[left];
            // find the index of the largest number less than or equal to the complement
            right = BinarySearch(numbers, complement, false, left + 1, right - 1);
            if(complement == numbers[right])
                break;
            
            complement = target - numbers[right];
            // find the smallest number equal to or larger than complement
            left = BinarySearch(numbers, complement, true, left + 1, right - 1);
            if(complement == numbers[left])
                break;
        } // end of while 
        return new int[] {left+1, right+1};
    } // end of twoSum
    
    
    public int BinarySearch(int[] numbers, int complement, boolean large, int left, int right){
        if(left == right)
            return left;
        while(left<=right){
            int mid = (left + right)/2;
            if(numbers[mid] == complement)
                return mid;
            if(numbers[mid] < complement)
                left = mid+1;
            if(numbers[mid] > complement)
                right = mid-1;
        }
        int mid = (left+right)/2;
        return large && mid < right ? mid +1 : mid;
    }
    
}
