/*
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
*/





/*
	66ms 98%
	for循环中嵌套了001 Two Sum的方法
	
	List<List<Integer>> ans = new LinkedList<>();	//ArrayList<>()也可以
	1)ans.add(Arrays.asList(a,b,c));
	或者
	2)List<Integer> l= new ArrayList<Integer>();
	  l.add(nums[i]);
	  l.add(nums[s]);
	  l.add(nums[e]);
	  ans.add(l);
	
	Arrays.sort: 从小到大排序
	排除了长度小于3个的数组，排除了排序后第一个是非负数
	
	LinkedList 与 ArrayList 的区别：
	【数组、ArrayList、List、LinkedList的区别】http://www.cnblogs.com/janneystory/p/5758958.html
	ArrayList 采用数组形式保存对象，将对象放在连续位置中，插入删除麻烦
	LinkedList 循环双向链表 插入删除容易，查找麻烦，要从第一个索引开始
	经比较发现，用ArrayList比LinkedList快一点，可能是因为不需要上下的链
	List<List<Integer>> ans = new ArrayList<>();
	ans.add(Arrays.asList(a,b,c));
	
	经比较发现，55-63行对于sum的判定时，将sum==0放在最后，运行速度会快一些
*/
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        if(nums.length<3 || nums == null) return new LinkedList<>();
        Arrays.sort(nums);
        List<List<Integer>> ans = new LinkedList<>();
        for(int i=0; i<nums.length-2; i++){
            if(nums[i]>0) break;
            if(i!=0 && nums[i-1]==nums[i]) continue;
            int lo = i+1, hi = nums.length-1;
            while(lo<hi){
                int sum = nums[i]+nums[lo]+nums[hi];
                if(sum < 0) lo++;
                else if(sum>0) hi--;
                else{
                    ans.add(Arrays.asList(nums[i], nums[lo], nums[hi]));
                    while(nums[lo] == nums[lo+1] && lo+1<hi) lo++;
                    while(nums[hi] == nums[hi-1] && lo<hi-1) hi--;
                    lo++;
                    hi--;
                }
            }
        }        
        return ans;
    }
}





/*
	73ms 94%
	List<List<Integer>> res = new ArrayList<>();
	函数的用法: private void XX()
*/
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        if (nums == null || nums.length == 0 || nums.length < 3) return new ArrayList<>();
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < nums.length - 2; i++) {
            int cur = nums[i];
            if (nums[i] > 0) break;
            if (i > 0 && nums[i] == nums[i-1]) continue;
            if (i < nums.length - 2) findThreeSum(-cur, nums, i, i + 1, nums.length - 1, res);
        }
        return res;
    }

    private void findThreeSum(int target, int[] nums, int baseIdx, int i, int j, List<List<Integer>> res) {
        int left = i, right = j;
        while (left < right) {
            if (nums[left] + nums[right] < target) {
                left++;
            } else if (nums[left] + nums[right] > target) {
                right--;
            } else {
                 res.add(Arrays.asList(nums[baseIdx], nums[left], nums[right]));
                 while (left < right && nums[left + 1] == nums[left]) left++;
                 while (left < right && nums[right - 1] == nums[right]) right--;
                 left++;
                 right--;
            }
        }
    }
}
