/*
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
*/





/*
	84ms
	List<List<Integer>> ans = new LinkedList<>();
	1)ans.add(Arrays.asList(a,b,c));
	或者
	2)List<Integer> l= new ArrayList<Integer>();
	  l.add(nums[i]);
    	  l.add(nums[s]);
    	  l.add(nums[e]);
    	  ans.add(l);	
	Arrays.sort: 从小到大排序
*/
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new LinkedList<>(); 
        for (int i = 0; i < nums.length-2; i++) {
            if(i!=0 && nums[i]==nums[i-1]) continue;
            int left = i + 1;
            int right = nums.length - 1;
            while(left < right){
                if(nums[i] + nums[left] + nums[right] == 0){
                    ans.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    while(nums[left+1] == nums[left] && left+1 < right) left++;
                    while(nums[right-1] == nums[right] && left < right-1) right--;
                    left++;
                    right--;
                }
                else if(nums[i] + nums[left] + nums[right] < 0)	left++;
                else if(nums[i] + nums[left] + nums[right] > 0) right--;
            }
        }
        return ans;
    }
}





/*
	60ms
	没看呢
*/
public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
            if (nums == null || nums.length == 0 || nums.length < 3) return new ArrayList<>();

        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();

        for (int i = 0; i < nums.length; i++) {
            int cur = nums[i];
            if (nums[i] > 0) break;
            if (i > 0 && nums[i] == nums[i-1]) continue;
            if (i < nums.length - 2) findThreeSum(-cur, nums, i, i + 1, nums.length - 1, res);
        }
        return res;
    }

    private void findThreeSum(int target, int[] nums, int baseIdx, int i, int j, List<List<Integer>> res) {
        int left = i, right = j;
        while (left < right) {
            if (nums[left] + nums[right] < target) {
                left++;
            } else if (nums[left] + nums[right] > target) {
                right--;
            } else {
                 res.add(Arrays.asList(nums[baseIdx], nums[left], nums[right]));
                 while (left < right && nums[left + 1] == nums[left]) left++;
                 while (left < right && nums[right - 1] == nums[right]) right--;
                 left++;
                 right--;
            }
        }
    }
}
