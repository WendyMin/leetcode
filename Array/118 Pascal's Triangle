Given numRows, generate the first numRows of Pascal's triangle.

For example, given numRows = 5,
Return

[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]






/*
  2ms 3%
  ArrayList.add(int index,Object ojb)
  ArrayList.size()
  ArrayList.set(int index,Object ojb)
  注意for循环中j的最小值和最大值的取值大小
*/
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> rows = new ArrayList<List<Integer>>();
        ArrayList<Integer> row = new ArrayList<Integer>();
        for(int i=0;i<numRows;i++){
            row.add(0,1);   
            for(int j=1;j<row.size()-1;j++){
                row.set(j,row.get(j)+row.get(j+1));
            }
            rows.add(new ArrayList<Integer>(row));
        }
        return rows;
    }
}







/*
  0ms 99.48%
  另一种做法，在submit里面看到，不必用List<List<>>的方法，直接用数组来存储答案，最后转换成List的形式，这样更加快
  (List)Arrays.asList(arr)：Arrays.asList()将数组变为List的形式，返回只读的List
  (List)Arrays.asList(arr)应当是把arr转换成的List再转换成List<List>>的形式
*/
class Solution {
    public List<List<Integer>> generate(int numRows){
        int[][] arr = new int[numRows][];
        for(int i = 0;i<numRows;i++){
            arr[i]= new int[i+1];
            for(int j = 0;j<i+1;j++){
                if(j==0||j==i) arr[i][j]=1;
                else arr[i][j]=arr[i-1][j-1]+arr[i-1][j];
            }
        }
        return (List)Arrays.asList(arr);
    }
}
