Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0





/*
  5ms 61%
 */
class Solution {
    public int searchInsert(int[] nums, int target) {
        int res=0;
        if(nums==null || nums.length==0) {return res;}
        if(nums.length==1){
            if(nums[0] < target) res=1;
            else res=0;
        }
        else{
            int i=0;
            while(i<nums.length){
                if(nums[i]==target){
                    res=i;
                    break;
                }
                else if(i<nums.length-1 && nums[i]<target){
                    i++;
                }
                else if(nums[i]>target){
                    res=i;
                    break;
                }
                else if(i==nums.length-1 && nums[i]<target){
                    res=i+1;
                    break;
                }
                else i++;

            }
        }
        return res;
    }
}







/*
  6ms 17%
  二分法
*/
class Solution {
    public int searchInsert(int[] nums, int target) {
        int l = 0;
        int r = nums.length;
        int m = 0;
        if(nums[nums.length-1]<target)
        	return nums.length;
        if(nums[0]>target)
        	return 0;
        while(l<=r){
            m = (l+r)/2;
            if(nums[m]==target)
            	return m;
            else if(nums[m]<target){
                l = m+1;
            }else{
                r = m-1;
            }         
            
        }
        return l;
    }
}
