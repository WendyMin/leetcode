Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
    
    
    
    
    
    
/*
      20ms 84%
      closet不能赋值为Integer.MIN_VALUE，否则与target相减会overflow，出现错误
*/
    class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int closet=nums[0]+nums[1]+nums[2];
        Arrays.sort(nums);
        for (int i = 0; i < nums.length-2; i++) {
            int lo = i + 1;
            int hi = nums.length - 1;
            while(lo < hi){
                int sum = nums[i] + nums[lo] + nums[hi];
                if(sum < target){
                    lo++;
                }
                else if(sum > target){
                    hi--;
                } 
                else{
                    return target;
                }
                if(Math.abs(sum-target)<Math.abs(closet-target)){
                    closet=sum;
                }
            }
        }
        return closet;
    }
}
