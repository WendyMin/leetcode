Given an index k, return the kth row of the Pascal's triangle.

For example, given k = 3,
Return [1,3,3,1].

Note:
Could you optimize your algorithm to use only O(k) extra space?






/*
  2ms 51%
  TC: O(k)
  SC: O(K`2)
  从118题延伸
*/
class Solution {
    public List<Integer> getRow(int rowIndex) {
        ArrayList<Integer> row = new ArrayList<Integer>();
        for(int i=0;i<rowIndex+1;i++){
            row.add(0,1);   
            for(int j=1;j<row.size()-1;j++){
                row.set(j,row.get(j)+row.get(j+1));
            }
        }
        return row;
    }
}






/*
  1ms 88%
*/
class Solution {
    public List<Integer> getRow(int rowIndex) {
        Integer[] rowList = new Integer[rowIndex+1];
        rowList[0] = 1;
        for(int i=1; i<rowList.length;i++) {
            rowList[i] = (int)((long)rowList[i-1]*(rowIndex-(i-1))/(i));
        }
        return Arrays.asList(rowList);
    }
}







class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> list = new ArrayList<Integer>();
        int r,n=rowIndex;
        for(r=0;r<=n;r++)
        {
            list.add(combination(n,r));
        }
        return list;
    }
    public int combination(int n,int r)
    {
        if(n==0||n==1||r==0||r==n)
        return 1;
        if(r>n/2)
            return combination(n,n-r);
        double prod=1;
        for(int i=r;i>=1;i--)
        {
            prod=prod*n/i;
            n--;
        }
        return (int)Math.round(prod);
    }
}
