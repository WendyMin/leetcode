/*
Given an array and a value, remove all instances of that value in place and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example:
Given input array nums = [3,2,2,3], val = 3

Your function should return length = 2, with the first two elements of nums being 2.
*/






/*
	9ms 53%
	time complexity: O(n)
	space complexity: O(1)
	出现需要删除的val，就用后面的覆盖，整体前移
*/
class Solution {
    public int removeElement(int[] nums, int val) {
        int i=0;
        for(int j=0; j<nums.length; j++){
            if(nums[j]!=val){
                nums[i++]=nums[j];
            }
        }
        return i;
    }
}







/*
	9ms 53%
	time complexity: O(n)
	space complexity: O(1)
	一旦出现val就把最后一个值赋给它，代码实现起来相对复杂一点
*/
class Solution {
    public int removeElement(int[] nums, int val) {
        int last = nums.length - 1;       
        for(int i = 0; i < nums.length; i++){
            while(nums[i] == val && last >= i){
                nums[i] = nums[last];
                last--;
            }
        }        
        return last + 1;
    }
}
