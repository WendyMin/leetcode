# Question 1 #

Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

----------


## 1 ##
    /*
    	48 ms
    考虑0+0=0，负数的情况
    */
    class Solution {
    	public int[] twoSum(int[] nums, int target) {
    		int[] ans = new int[2];
    		int i, j;
    		for(i = 0; i < nums.length - 1 ; i++)
    		{
    			for(j = i + 1; j < nums.length; j++)
    			{
    				if(nums[i] + nums[j] == target)
    				{
    					ans[0] = i;
    					ans[1] = j;
    					break;
    				}
    			}
    		}
    	return ans;
    	}
    }




## 2  ##
    
    /*
    	6ms
    	Arrays.copyOf(): 复制数组
    	Arrays.sort(): 按从小到大排序
    */
    class Solution {
    public int[] twoSum(int[] nums, int target) {
	    int[] nums2 = Arrays.copyOf(nums, nums.length);		//copyOf: 复制！！！
	    Arrays.sort(nums2);						//sort: 排序！！！从小到大
		int start = 0, end = nums.length - 1;	
        int n1 = 0, n2 = 0;						//存取得到的两个数
        while(start < end)
        {
            if(nums2[start] + nums2[end] < target)
            {
                start++;
            }
            else if(nums2[start] + nums2[end] > target)
            {
                end--;
            }
            else
            {
                n1 = nums2[start];
                n2 = nums2[end];
                break;
            }
        }
        
        int[] ans = new int[2];						//在原数组中找到得到的两个数n1,n2所对应的位置
        for(int i = 0; i < nums.length; i++)
        {
            if(nums[i] == n1)
            {
                ans[0] = i;
                break;
            }
        }
        for(int i = 0; i < nums.length; i++)
        {
            if(nums[i] == n2 && i != ans[0])
            {
                ans[1] = i;
                break;
            }
        }
        return ans;
    }
}




## 3 ##
    /*
	6ms
	Arrays.copyOf(): 复制数组
	Arrays.sort(): 按从小到大排序
    */
    class Solution {
    public int[] twoSum(int[] nums, int target) {
	    int[] nums2 = Arrays.copyOf(nums, nums.length);		//copyOf: 复制！！！
	    Arrays.sort(nums2);						//sort: 排序！！！从小到大
		int start = 0, end = nums.length - 1;	
        int n1 = 0, n2 = 0;						//存取得到的两个数
        while(start < end)
        {
            if(nums2[start] + nums2[end] < target)
            {
                start++;
            }
            else if(nums2[start] + nums2[end] > target)
            {
                end--;
            }
            else
            {
                n1 = nums2[start];
                n2 = nums2[end];
                break;
            }
        }
        
        int[] ans = new int[2];						//在原数组中找到得到的两个数n1,n2所对应的位置
        for(int i = 0; i < nums.length; i++)
        {
            if(nums[i] == n1)
            {
                ans[0] = i;
                break;
            }
        }
        for(int i = 0; i < nums.length; i++)
        {
            if(nums[i] == n2 && i != ans[0])
            {
                ans[1] = i;
                break;
            }
        }
        return ans;
    }
}
