Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.






/*
  16ms 37%
  一开始的想法是建一个HashMap，存入从第一个到第i个的所有的和，然后相减，得到最大的值
  后来思考觉得时间复杂度有一点高，因此参考Discuss换了一种解决方法，只存到指定位置为最后一位的最大数串之和，一旦前面的和为负，就舍弃
*/
class Solution {
    public int maxSubArray(int[] nums) {
        int[] sums = new int[nums.length];                      //sums[i]表示最后一位是nums[i]的最大的数串之和
        sums[0] = nums[0];
        int max = nums[0];
        for(int i=1;i<nums.length;i++){
            sums[i] = nums[i] + (sums[i-1]>0 ? sums[i-1] : 0);  //保证每次都大于等于前一次，前面为负就舍弃
            max = Math.max(max, sums[i]);
        }
        return max;
    }
}








/*
  16ms 37%
  Solution的另一种解法，没有用数组存储数串之和，确实没有必要用到sums[]，一个sum就足够了
*/
class Solution {
    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE, sum = 0;
        for (int i = 0; i < nums.length; i++) {
            if (sum < 0) sum = nums[i];
            else sum += nums[i];
            if (sum > max) max = sum;
        }
        return max;
    }
}
