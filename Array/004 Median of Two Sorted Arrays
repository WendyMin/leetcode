There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5







/*
  88ms 15%
  想把两个数组合并到一起，再用Arrays.sort进行排序，取得中间值
*/
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] nums = new int[nums1.length+nums2.length];
        for(int i=0;i<nums1.length;i++){
            nums[i]=nums1[i];
        }
        for(int i=0;i<nums2.length;i++){
            nums[i+nums1.length]=nums2[i];
        }
        Arrays.sort(nums);
        if(nums.length%2==1) return nums[nums.length/2]/1.0;
        else return (nums[nums.length/2-1]+nums[nums.length/2])/2.0;
    }
}








/*
  66ms 74%
  看Solution得出的递归方法
  首先，保证第二个数组比第一个长或一样，然后将两个数组分别分成两段，保证两个数组的左段个数等于右段个数，通过while循环比较找到合适的切分点
*/
class Solution {
    public double findMedianSortedArrays(int[] A, int[] B) {
        int m = A.length;
        int n = B.length;
        if (m > n) {                                          //保证m<=n
            int[] temp = A; A = B; B = temp;
            int tmp = m; m = n; n = tmp;
        }
        int iMin = 0, iMax = m, halfLen = (m + n + 1) / 2;    //注意halfLen的选取，对于偶数奇数都适用
        while (iMin <= iMax) {
            int i = (iMin + iMax) / 2;
            int j = halfLen - i;
            if (i < iMax && B[j-1] > A[i]){
                iMin++;                                       // i is too small
            }
            else if (i > iMin && A[i-1] > B[j]) {
                iMax--;                                       // i is too big
            }
            else {                                            // i is perfect
                int maxLeft = 0;
                if (i == 0) { maxLeft = B[j-1]; }
                else if (j == 0) { maxLeft = A[i-1]; }
                else { maxLeft = Math.max(A[i-1], B[j-1]); }
                if ( (m + n) % 2 == 1 ) { return maxLeft; }   //奇数个，正好；偶数个，继续求解

                int minRight = 0;
                if (i == m) { minRight = B[j]; }
                else if (j == n) { minRight = A[i]; }
                else { minRight = Math.min(B[j], A[i]); }

                return (maxLeft + minRight) / 2.0;
            }
        }
        return 0.0;
    }
}
