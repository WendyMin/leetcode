Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]






/*
  29ms 84%
  注意target为负，排除与前一个相同的情况，排除特殊情况，节省时间
*/
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new LinkedList<>();
        if(nums.length < 4) return res;
        Arrays.sort(nums);
        for(int i = 0; i < nums.length - 3; i++){
            if(nums[i] + nums[i+1] + nums[i+2] + nums[i+3] > target) break;
            if(nums[i] + nums[nums.length-3] + nums[nums.length-2] + nums[nums.length-1] < target) continue;
            if(i > 0 && nums[i-1] == nums[i]) continue;
            for(int j = i + 1;j < nums.length - 2; j++){
                if(nums[i] + nums[j] + nums[j+1] + nums[j+2] > target) break;
                if(nums[i] + nums[j] + nums[nums.length-2] + nums[nums.length-1] < target) continue;
                if(j > i + 1 && nums[j-1] == nums[j]) continue;
                int complement = target - nums[i] - nums[j];
                int left = j + 1, right = nums.length - 1;
                while(left < right){
                    // if(nums[left] == nums[right]) break;
                    if(nums[left] + nums[right] < complement) left++;
                    else if(nums[left] + nums[right] > complement) right--;
                    else if(!res.contains(Arrays.asList(nums[i], nums[j], nums[left], nums[right]))){
                        res.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                        while(nums[left]==nums[left+1] && left+1 < right) left++;
                        while(nums[right]==nums[right-1] && left < right-1) right--;
                        left++;
                        right--;
                    }
                }
            }
        }
        return res;
    }
}
