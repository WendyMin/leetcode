Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.

Note:
The given integer is guaranteed to fit within the range of a 32-bit signed integer.
You could assume no leading zero bit in the integerâ€™s binary representation.
Example 1:
Input: 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
Example 2:
Input: 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.





/*
  48ms 30%
*/
class Solution {
    public int myAtoi(String str) {
        if(str.length() == 0) return 0;
        int index = 0;
        while(str.charAt(index) == ' ' && index < str.length()){
            index++;
        }
        int isPos = 1;
        if(str.charAt(index) == '+' || str.charAt(index) == '-'){
            isPos = str.charAt(index) == '+' ? 1 : -1;
            index++;
        }
        int ans = 0;
        while(index < str.length()){
            int num = str.charAt(index) - '0';
            if(num<0 || num>9) break;
            if(ans > Integer.MAX_VALUE/10 || (ans == Integer.MAX_VALUE/10 && num > Integer.MAX_VALUE%10)){
                return isPos == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            }
            ans = ans*10 + num;
            index++;
        }
        ans *= isPos;
        return ans;
    }
}
