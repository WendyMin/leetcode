Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

For example:
"112358" is an additive number because the digits can form an additive sequence: 1, 1, 2, 3, 5, 8.

1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
"199100199" is also an additive number, the additive sequence is: 1, 99, 100, 199.
1 + 99 = 100, 99 + 100 = 199
Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

Given a string containing only digits '0'-'9', write a function to determine if it's an additive number.

Follow up:
How would you handle overflow for very large input integers?






/*
  8ms 13%
  使用BigInteger存储大数
  BigInteger.add()：将BigInteger加上括号里的值
  BigInteger.substract()：将BigInterger减去括号里的值
  BigInteger.toString()：将BigInteger转换为十进制
  substring(0,i)表示从0~i-1截取成BigInteger
  其中i为第一个数的长度，j为第二个数的长度
*/
import java.math.BigInteger;

class Solution {
    public boolean isAdditiveNumber(String num) {
        int n = num.length();
        for (int i = 1; i <= n / 2; i++) {
            if (num.charAt(0) == '0' && i > 1) return false;        //第一个数大于1位，第一位为0，false
            BigInteger x1 = new BigInteger(num.substring(0, i));    //第一个数x1
            for (int j = 1; Math.max(j, i) <= n-i-j; j++) {         //第二个数的长度j
                if (num.charAt(i) == '0' && j > 1) break;           //第二个数大于1位，第一位为0，false
                BigInteger x2 = new BigInteger(num.substring(i, i + j));    //第二个数x2
                if (isValid(x1, x2, i + j, num)) return true;
            }
        }
        return false;
    }
    private boolean isValid(BigInteger x1, BigInteger x2, int start, String num) {
        if (start == num.length()) return true;                     //只有2个数了，后面正好没有，true
        x2 = x2.add(x1);                                            //x2变为两个数的和
        x1 = x2.subtract(x1);                                       //x1变为原来的第二个数
        String sum = x2.toString();                                 //BigInteger的十进制表示
        return num.startsWith(sum, start) && isValid(x1, x2, start + sum.length(), num);    //迭代isValid，第一个数为x1，第二个数为x2
    }
}
